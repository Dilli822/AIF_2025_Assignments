===== SETUP KEY POINTS ====
1. Project structure according to aif 2025 recommendations [documentation]
2. kept training and testing csv for the model Assignments/disease-predictor/data/disease_predictCSV
3. trained and store the models .joblib files in: Assignments/disease-predictor/models
4. original model inside Assignments/disease-predictor/scripts/train_model.py
5. tests : Assignments/disease-predictor/tests/ Assignments/disease-predictor/tests/test_predict.py and Assignments/disease-predictor/tests/test.py
6. for pytest automation: Assignments/disease-predictor/pytest.ini
7. .env stores all settings template (must not be pushed)
8. pre hook git commit,lines,indentation,syntax checking - Assignments/disease-predictor/.pre-commit-config.yaml
9. config.py uses pydantic as configuration file that holds important settings or configuration variables: Assignments/disease-predictor/config.py
10. app/main.py : entry point ,Assignments/disease-predictor/app/main.py
11. ml_model.py: store model, Assignments/disease-predictor/app/ml_model.py
12. schemas.py: check the fields of api service json, Assignments/disease-predictor/app/schemas.py
13. git branch setup development
14. All tests passed using pytest using pytest and pytest.ini
15. Install mkdocs library for documentation settings for mkdocs: /disease-predictor/mkdocs.yml and /disease-predictor/docs/index.md
16. if occupied then (env) dilli@MacBookAir disease-predictor % lsof -i :8000
17. dockerfile /disease-predictor/dockerfile : a script used to create a Docker image
18. Build the Docker Image /disease-predictor/dockerfile,remember to open the docker application and cmd is : docker build -t disease-predictor .
19. check the docker image using cmd: docker images
20. run the docker container using cmd: docker run -p 5000:5000 disease-predictor

=====================================================================================================================
[16]
COMMAND   PID  USER   FD   TYPE             DEVICE SIZE/OFF NODE NAME
Python  63537 dilli    3u  IPv4 0x59872c91ed64dee1      0t0  TCP localhost:irdmi (LISTEN)
Python  69895 dilli    3u  IPv4 0x59872c91ed64dee1      0t0  TCP localhost:irdmi (LISTEN)
(env) dilli@MacBookAir disease-predictor % lsof -i tcp:8000

COMMAND   PID  USER   FD   TYPE             DEVICE SIZE/OFF NODE NAME
Python  63537 dilli    3u  IPv4 0x59872c91ed64dee1      0t0  TCP localhost:irdmi (LISTEN)
Python  69895 dilli    3u  IPv4 0x59872c91ed64dee1      0t0  TCP localhost:irdmi (LISTEN)
(env) dilli@MacBookAir disease-predictor % kill -9 <PID>

zsh: parse error near `\n'
(env) dilli@MacBookAir disease-predictor % mkdocs serve -p 8001

Usage: mkdocs serve [OPTIONS]
Try 'mkdocs serve -h' for help.

Error: No such option: -p
(env) dilli@MacBookAir disease-predictor % kill -9 69895

(env) dilli@MacBookAir disease-predictor % mkdocs serve --dev-addr=0.0.0.0:8001



## DOCKER LIFECYCLE - 1. CREATE IMAGE -> 2. BUILD THE CONTAINER 3. RELEASE/RUN/START THE CONTAINER

1. CREATE IMAGE WITH NAME DOCKERFILE

2. (env) dilli@MacBookAir disease-predictor % docker build -t disease-predictor .

[+] Building 107.7s (10/10) FINISHED                                                  docker:desktop-linux
 => [internal] load build definition from dockerfile                                                  0.0s
 => => transferring dockerfile: 363B                                                                  0.0s
 => [internal] load metadata for docker.io/library/python:3.10-slim                                   1.1s
 => [internal] load .dockerignore                                                                     0.0s
 => => transferring context: 2B                                                                       0.0s
 => [1/5] FROM docker.io/library/python:3.10-slim@sha256:e1013c40c02a7875ae30c78c69b68ea7bee31713e8a  0.0s
 => [internal] load build context                                                                     0.0s
 => => transferring context: 2.68kB                                                                   0.0s
 => CACHED [2/5] WORKDIR /app                                                                         0.0s
 => [3/5] COPY requirements.txt .                                                                     0.0s
 => [4/5] RUN pip install -r requirements.txt                                                        99.5s
 => [5/5] COPY . .                                                                                    0.3s
 => exporting to image                                                                                6.7s
 => => exporting layers                                                                               6.7s
 => => writing image sha256:cbdec4585dbd4d959d42f25cd18f5dd04ac9afff572f82cd70a3aae0d4a9cc40          0.0s
 => => naming to docker.io/library/disease-predictor

3. CHECK THE IMAGES : docker images
4. RUN THE CONTAINER: docker run -p 5000:5000 disease-predictor
5. Access Your Application
If  app is running on port 5000, we should now be able to access it at http://localhost:5000 in our browser.


===== 3. CHECK THE IMAGES : docker images ====
(env) dilli@MacBookAir disease-predictor % docker images
REPOSITORY          TAG       IMAGE ID       CREATED         SIZE
disease-predictor   latest    cbdec4585dbd   2 minutes ago   1.95GB
my-python-app       latest    cf5ec9120687   44 hours ago    691MB



====== EXPLAINATION OF DOCKER-COMPOSE.YML ======
‚úÖ version: "3.10"
Defines the Docker Compose file format version.

3.10 is compatible with recent Docker versions.

‚úÖ services:
Defines the containers (services) you want to run.

üîπ app: (your main application)
yaml

build: .
Builds the app from the Dockerfile in the current folder.

yaml

ports:
  - "8000:8000"
Maps port 8000 of your computer to port 8000 inside the container.

yaml

env_file:
  - .env
Loads environment variables from the .env file.

üîπ db: (PostgreSQL database)
yaml

image: postgres:latest
Uses the latest PostgreSQL image.

yaml

environment:
  POSTGRES_USER: user
  POSTGRES_PASSWORD: password
  POSTGRES_DB: app_db
Sets up the database with a username, password, and DB name.

yaml

volumes:
  - db_data:/var/lib/postgresql/data
Stores database files outside the container so data isn't lost when the container stops.

‚úÖ volumes:
yaml

db_data:
Creates a named volume called db_data used by the database.

üß† Summary:
Key Part	      What it does
build	   =====  Builds app from Dockerfile
ports	   =====  Exposes the app to your computer
env_file   =====  Loads settings from .env file
image	    ===== Pulls PostgreSQL image
environment	===== Sets DB credentials
volumes	     ===== Saves DB data persistently.

====================================================================================================
Guidelines (not strict requirements):
‚ùñ Use environment variables for configuration via pydantic or similar‚úÖ
‚ùñ Structure your project with a clear layout (cookiecutter or your own)‚úÖ
‚ùñ Set up Git with a simple branching strategy ‚úÖ
‚ùñ Configure and use pre-commit hooks ‚úÖ
‚ùñ Add at least one test case using pytest ‚úÖ
‚ùñ Use Docker to containerize your application ‚úÖ
‚ùñ Optionally use docker-compose to add a second service (e.g., Redis or Postgres) ‚úÖ ‚ùå„ÄÄ
‚ùñ Set up a GitHub Actions workflow (for linting, tests, Docker build, etc.) ‚úÖ
‚ùñ Add basic documentation with MkDocs or a simple README ‚úÖ
‚ùñ Include VSCode settings/extensions if helpful (optional) ‚ùå

Deliverables:
‚ùñ A GitHub repository containing your project ‚úÖ
‚ùñ A README.md that explains: ‚úÖ
‚û¢ What your project does ‚úÖ
‚û¢ How to run it (locally or using Docker) ‚úÖ
‚û¢ Any configuration or setup notes ‚úÖ
‚ùñ A short screen recording video of : ‚úÖ
‚û¢ Your app running„ÄÄ‚úÖ
‚û¢ CI workflow or tests passing„ÄÄ‚úÖ

Optional Exploration Ideas:
‚ùñ Deploy to a test environment or publish to Docker Hub  ‚ùå
‚ùñ Integrate a real API (e.g., weather, currency rates, public datasets) ‚úÖ
‚ùñ Use FastAPI features like dependencies, events, or background tasks ‚ùå
‚ùñ Try out async database operations ‚ùå
